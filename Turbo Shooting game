#include <graphics.h>
#include <conio.h>
#include <stdlib.h>
#include <stdio.h>
#include <dos.h>
#include <math.h>

#define SCREEN_WIDTH 640
#define SCREEN_HEIGHT 480
#define TARGET_RADIUS 20
#define BULLET_RADIUS 5
#define PLAYER_Y (SCREEN_HEIGHT - 50)
#define MAX_BULLETS 5
#define PLAYER_WIDTH 40

struct Target {
    int x, y;
};

struct Bullet {
    int x, y;
    int active;
};

void drawTarget(Target t) {
    setcolor(RED);
    setfillstyle(SOLID_FILL, RED);
    circle(t.x, t.y, TARGET_RADIUS);
    floodfill(t.x, t.y, RED);
}

void drawBullet(Bullet b) {
    if (b.active) {
        setcolor(WHITE);
        setfillstyle(SOLID_FILL, WHITE);
        circle(b.x, b.y, BULLET_RADIUS);
        floodfill(b.x, b.y, WHITE);
    }
}

void drawPlayer(int playerX) {
    setcolor(GREEN);
    setfillstyle(SOLID_FILL, GREEN);
    rectangle(playerX - PLAYER_WIDTH / 2, PLAYER_Y, playerX + PLAYER_WIDTH / 2, PLAYER_Y + 10);
    floodfill(playerX, PLAYER_Y + 5, GREEN);
}

int detectCollision(Bullet b, Target t) {
    return (sqrt(pow(b.x - t.x, 2) + pow(b.y - t.y, 2)) < TARGET_RADIUS);
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    
    Target target = {rand() % (SCREEN_WIDTH - 40) + 20, rand() % (SCREEN_HEIGHT / 2) + 20};
    Bullet bullets[MAX_BULLETS] = {0};
    int targetDirection = 1;
    int score = 0;
    int missedShots = 0;
    char ch;
    int i; // Declare the variable i outside the loops
    int playerX = SCREEN_WIDTH / 2; // Initialize player's position

    while (1) {
        cleardevice();
        
        // Draw player, target, and bullets
        drawPlayer(playerX);
        drawTarget(target);
        for (i = 0; i < MAX_BULLETS; i++) {
            drawBullet(bullets[i]);
        }

        // Move target left and right
        target.x += targetDirection * 5;
        if (target.x < 20 || target.x > SCREEN_WIDTH - 20) {
            targetDirection *= -1;
        }

        // Move bullets
        for (i = 0; i < MAX_BULLETS; i++) {
            if (bullets[i].active) {
                bullets[i].y -= 10;
                if (bullets[i].y < 0) {
                    bullets[i].active = 0;
                    missedShots++;
                }
            }
        }

        // Check for user input
        if (kbhit()) {
            ch = getch();
            if (ch == ' ') {
                // Fire a bullet
                for (i = 0; i < MAX_BULLETS; i++) {
                    if (!bullets[i].active) {
                        bullets[i].x = playerX; // Fire bullet from player's current position
                        bullets[i].y = PLAYER_Y;
                        bullets[i].active = 1;
                        break;
                    }
                }
            } else if (ch == 'a') {
                // Move player left
                playerX -= 10;
                if (playerX - PLAYER_WIDTH / 2 < 0) {
                    playerX = PLAYER_WIDTH / 2; // Prevent moving out of bounds
                }
            } else if (ch == 'd') {
                // Move player right
                playerX += 10;
                if (playerX + PLAYER_WIDTH / 2 > SCREEN_WIDTH) {
                    playerX = SCREEN_WIDTH - PLAYER_WIDTH / 2; // Prevent moving out of bounds
                }
            } else if (ch == 'q') {
                break;
            }
        }

        // Check for collisions
        for (i = 0; i < MAX_BULLETS; i++) {
            if (bullets[i].active && detectCollision(bullets[i], target)) {
                target.x = rand() % (SCREEN_WIDTH - 40) + 20;
                target.y = rand() % (SCREEN_HEIGHT / 2) + 20;
                bullets[i].active = 0;
                score += 10;
            }
        }

        // Display score
        setcolor(YELLOW);
        char scoreText[20];
        sprintf(scoreText, "Score: %d", score);
        outtextxy(10, 10, scoreText);

        // Display missed shots
        char missedText[20];
        sprintf(missedText, "Missed: %d", missedShots);
        outtextxy(10, 30, missedText);

        // Game over condition
        if (missedShots >= 10) {
            setcolor(RED);
            outtextxy(SCREEN_WIDTH / 2 - 50, SCREEN_HEIGHT / 2, "GAME OVER");
            delay(2000);
            break;
        }

        delay(50);
    }

    closegraph();
    return 0;
}
